package main

import (
	"fmt"
	"os"
	"strings"
)

func mainBroadcast() {
	fmt.Println("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ Broadcast –≤–µ—â–∞–Ω–∏—é –≤ Go")
	fmt.Println(strings.Repeat("=", 60))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: os.Args[0] - –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã, os.Args[1] - "broadcast", os.Args[2] - —Ç–∏–ø
	if len(os.Args) > 2 {
		switch os.Args[2] {
		case "simple":
			ExampleSimpleBroadcaster()
		case "cond":
			ExampleCondBroadcaster()
		case "typed":
			ExampleTypedBroadcaster()
		default:
			showHelp()
		}
	} else {
		// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã
		ExampleSimpleBroadcaster()
		ExampleCondBroadcaster()
		ExampleTypedBroadcaster()

		fmt.Println("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
	}
}

func showHelp() {
	fmt.Println(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: go run *.go broadcast [—Ç–∏–ø]

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:
  simple  - –ü—Ä–æ—Å—Ç–æ–π broadcaster —á–µ—Ä–µ–∑ –≥–æ—Ä—É—Ç–∏–Ω—É –∏ –∫–∞–Ω–∞–ª—ã
  cond    - Broadcaster —á–µ—Ä–µ–∑ sync.Cond (–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π)
  typed   - –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π broadcaster —Å generics

–ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Ä—è–¥.

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞:
  go run *.go broadcast simple
  go run *.go broadcast cond  
  go run *.go broadcast typed
  go run *.go broadcast
`)
}
