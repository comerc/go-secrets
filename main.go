package main

import (
	"fmt"
	"go-secrets/ordered_set"
)

func main() {
	fmt.Println("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ –Ω–∞ Go")
	fmt.Println("============================================")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	ordered_set.RunExamples()

	fmt.Println("\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è:")
	performanceComparison()

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
}

func performanceComparison() {
	fmt.Println("\n6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:")

	// –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞
	sliceSet := ordered_set.NewSliceBasedSet[ordered_set.Integer]()
	treeSet := ordered_set.NewTreeSet[ordered_set.Integer]()

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	n := 1000
	fmt.Printf("–î–æ–±–∞–≤–ª—è–µ–º %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ...\n", n)

	// SliceBasedSet
	for i := 0; i < n; i++ {
		sliceSet.Add(ordered_set.Integer(i))
	}
	fmt.Printf("SliceBasedSet: –¥–æ–±–∞–≤–ª–µ–Ω–æ %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n", sliceSet.Size())

	// TreeSet
	for i := 0; i < n; i++ {
		treeSet.Add(ordered_set.Integer(i))
	}
	fmt.Printf("TreeSet: –¥–æ–±–∞–≤–ª–µ–Ω–æ %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n", treeSet.Size())

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
	fmt.Println("\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
	testElement := ordered_set.Integer(n / 2)

	fmt.Printf("–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ %d –≤ SliceBasedSet: %t\n", testElement, sliceSet.Contains(testElement))
	fmt.Printf("–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ %d –≤ TreeSet: %t\n", testElement, treeSet.Contains(testElement))

	fmt.Println("\n–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π:")
	fmt.Println("SliceBasedSet:")
	fmt.Println("  - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ: O(n)")
	fmt.Println("  - –ü–æ–∏—Å–∫: O(log n)")
	fmt.Println("  - –£–¥–∞–ª–µ–Ω–∏–µ: O(n)")
	fmt.Println("  - –ü–∞–º—è—Ç—å: O(n)")

	fmt.Println("TreeSet (–∫—Ä–∞—Å–Ω–æ-—á—ë—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ):")
	fmt.Println("  - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ: O(log n)")
	fmt.Println("  - –ü–æ–∏—Å–∫: O(log n)")
	fmt.Println("  - –£–¥–∞–ª–µ–Ω–∏–µ: O(log n)")
	fmt.Println("  - –ü–∞–º—è—Ç—å: O(n)")
}
